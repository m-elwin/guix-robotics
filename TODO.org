* Packaging Currently
- [ ]  rqt-common-plugins

* Additional Test Packages
There are some ROS packages that only contain tests.
Listing them here for eventual inclusion as having them will increase robustness
- ros_comm/test has additional tests for each tool
  - Some of the tests are run during the check phase
  - Some of the tests are installed as "integration tests" to be manually run
  - Should add all the test packages, and create a metapackage for the tests that runs all the integration tests
- ros_comm/test/test_rosbag downloads data from the internet during its test
  - Need to make separate (origin) for each of the test data and I think these can be used directly as inputs
- bond-core/test_bond
  - separate tests for bonds
- nodelet_core/test_nodelet
- nodelet_core/test_nodelet_topic_tools
- geometry2/test_tf2
- diagnostics/test_diagnostic-aggregator
- vision_opencv/opencv_tests

* To Add To README
** Discussion of inputs
1. Native inputs: used only during build or test time.
   - ROS <test_depend> only is a native-input
   - ROS <build_depend> only is a native input
2. Inputs, used during build time and during runtime, but not by dependencies
   - Appropriate when an executable uses C++ library A or when a library B uses a C++ library A
     and users of B do not need A's headers (essentially check that the public header files of B do not include A headers)
3. Propagated-inputs: used by dependencies during runtime
   - If Python module A imports Python module B, then B is a propagated input of A
   - If C++ library A uses C++ library B and A.h includes B.h
4. Generally: If a ROS package provides anything python related, than it's dependencies should make it a propagated input
   (unless said package only contains nodes and no python modules or libraries)
   Packages that provide messages should have
   1. A native-input on message-generation
   2. A propagated-input on message-runtime
   3. A propagated-input for each message package that it's messages use
** Modes of Usage
1. There will be a guix-pack relocatable tarball that can be used anywhere
   - Can this also include the guix daemon?
2. Users should install guix to get the most out of the package
   - Link to guix website, ubuntu users can =apt install guix=, =guix pull=, wait a long time.
3. Can be used in different modes
   =guix install= (Not recommended) installs and makes ready at your shell
   =guix shell= (without pure or container) layers these on top (like the default virtual env)
      - Good for quickly using utilities, but can get messy and mix with system
   =guix shell --pure= Integrated with system but uses only guix paths
      - Some packages can be messed up if the search the filesystem in known locations
      - ROS packages distributed through this channel will be modified to find the guix versions first
   =guix shell --container= Run in a container. Add =--networking= for network access and =--nested= to use guix from within
      - The most isolation, current working directory is the only part mounted in container
   =guix shell --contaner --preserve-fhs=
      - Run in a container emulating the standard FHS system. Useful for using packages that have not been patched to guix's filesystem layout
** Modes of Development
*** Compiling ROS using guix tools
- All of ROS can be compiled using the regular instructions in a guix container with a preserved root fhs
  (with development pre-requisites which are all part of guix/the channel)
- The catkin distributed with this channel can be used to compile everything (except catkin itself) in a workspace in a -C or --pure without the
  root filesystem being preserved.
  - It is important to remove catkin, as otherwise the build will start using the unpatched catkin
  - Not all programs will run due to them needing patches, unless in a container with root fhs preserved
- Rosdep will not work with guix. It's available but there are no rosdep rules for guix.
*** The guix way
- If you want to modify a package that is already provided you can (inherit) and then apply patches
- Both the inherited and original version can coexist on the same system and the particular version needed can be chosen per-shell
- Generally, workspaces are not needed if you do the development using guix, but can be used particularly in "preserve-root-fs mode"
  - Most ROS packages don't search the filesystem outside of the ROS devel/install space so most "should" run in a regular --pure guix shell without patches


* Longer-Term
0. Not all packages have been tested in mixed, --pure and --container shell environments

1. Documentation: ros has it's own documentation system, could
   export that as a :doc part of split packages for each ROS package

2. Can we change the prefix to install into /gnu/store/packagedir/opt/ros?
      CMAKE_INSTALL_PREFIX is only part of it. The problem is the prefix for python packages
      cannot be changed (easily) in guix as far as I know since it messes with GUIX_PATH.
      So far having everything organized in the default manner has not been an issue.
3. Should we use the version of python that is used with noetic?
   - There are a very few python incompatibilities that are relatively easy to patch, but using the proper python version would remove that
   - There are however, advantages to not needing to maintain a separate older python version.
   - So long as the patches required are limited and straightforward, I favor patching to the guix version of python
5. Add more packages.

* Additional Features and Known Limitations
- rqt_plot only has the option to use the matplotlib backend.
  Could add support for other backends
- rqt_web does not work because there is no pyqt5-webkit
